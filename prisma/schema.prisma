// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

generator zod {
  provider = "zod-prisma-types"
  output   = "../gen/zod"
}

/// Always after the prisma-client-js generator
generator json {
  provider = "prisma-json-types-generator"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

enum ApplicationStatus {
  INIT
  PHONE_INTERVIEW_PHASE
  ONSITE_INTERVIEW_PHASE
  ACCEPTED
  REJECTED
}

model Application {
  id        String    @id @default(cuid())
  createdAt DateTime? @default(now()) @map("created_at")
  updatedAt DateTime? @default(now()) @updatedAt @map("updated_at")

  createdBy   User?   @relation(fields: [createdById], references: [id])
  createdById String?

  /// [AppJsonType]
  meta Json?

  /// [AppJsonType]
  data   Json
  status ApplicationStatus @default(INIT)

  email String

  @@index([createdById])
}

// Necessary for Next auth
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? // @db.Text
  access_token             String? // @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? // @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  role          UserRole      @default(USER)
  accounts      Account[]
  sessions      Session[]
  application   Application[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
